<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花開清葉</title>
  
  <subtitle>liaaaaa是5个a啊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liaaaaa.github.io/"/>
  <updated>2018-12-27T07:37:48.541Z</updated>
  <id>http://liaaaaa.github.io/</id>
  
  <author>
    <name>小栗子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity3D 总结</title>
    <link href="http://liaaaaa.github.io/2018/12/Unity3D-%E6%80%BB%E7%BB%93/"/>
    <id>http://liaaaaa.github.io/2018/12/Unity3D-总结/</id>
    <published>2018-12-19T10:48:50.000Z</published>
    <updated>2018-12-27T07:37:48.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TerrainData"><a href="#TerrainData" class="headerlink" title="TerrainData"></a>TerrainData</h3><blockquote><p>四个方法<br><code>Vector3 TerrrainData.GetInterpolatedNormal(float x, float y)</code> //0f ~ 1f<br><code>float TerrrainData.GetInterpolatedHeight(float x, float y)</code> //0f ~ 1f<br><code>float TerrrainData.GetHeight(int x, int y)</code> //0 ~ TerrainData.size<br><code>float Terrain.SampleHeight(Vector3 worldPosition)</code></p></blockquote><ul><li>GetHeight 改成根据世界坐标来获取地形上的高度<br>内置方法需要用在高度图内的<code>x, y</code>的索引值才能获得高度，<del>利用竖直<code>Ray</code>，</del>利用内置方法<code>terrain.SampleHeight(Vector3)</code>就可以根据世界坐标中的<code>x, z</code>来获得地形上的<code>y</code>。<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vector3 <span class="title">GetHeightInTerrain</span>(<span class="params">Terrain terrain, <span class="keyword">float</span> x, <span class="keyword">float</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ray ray = <span class="keyword">new</span> Ray(<span class="keyword">new</span> Vector3(x, <span class="number">0</span>, y), Vector3.up);</span><br><span class="line">    RaycastHit hit;</span><br><span class="line">    <span class="keyword">if</span> (Physics.Raycast(ray, <span class="keyword">out</span> hit, Mathf.Infinity))</span><br><span class="line">        <span class="keyword">return</span> hit.point;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><del>弊端是如果地形上没有这个点，返回的这个点可能需要在调用的地方做个判断。</del></p><hr><ul><li>GetInterpolatedNormal 创建随地形倾斜的物体<br>其中，<code>TerrainData.size</code>包含的<code>x, y, z</code>分别是地形的长宽高。之前试了<code>terrain.alphamapWidth</code>、<code>terrain.detailWidth</code>、<code>terrain.heightmapWidth</code>都不是想要的宽度。<br><code>normal_per</code>变量是取了一个和法线垂直的向量，让生成的物体面向那个方向。如果直接面向<code>normal</code>就会跟躺着一样。如果物体躺不躺的样子没啥区别，就不用这样折腾了。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> x = UnityEngine.Random.Range(<span class="number">0.1f</span>, <span class="number">0.9f</span>);</span><br><span class="line"><span class="keyword">float</span> y = UnityEngine.Random.Range(<span class="number">0.1f</span>, <span class="number">0.9f</span>);</span><br><span class="line">Vector3 pos = <span class="keyword">new</span> Vector3(x * terrain.terrainData.size.x + terrain.transform.position.x, terrain.terrainData.GetInterpolatedHeight(x, y), y * terrain.terrainData.size.z + terrain.transform.position.z);</span><br><span class="line"><span class="comment">//Debug.Log(pos + " " + terrain.terrainData.GetInterpolatedNormal(x, y));</span></span><br><span class="line">Vector3 normal = terrain.terrainData.GetInterpolatedNormal(x, y);</span><br><span class="line">Vector3 normal_per = normal.z == <span class="number">0</span> ? (normal.y == <span class="number">0</span> ? <span class="keyword">new</span> Vector3(-(normal.y + normal.z) / normal.x, <span class="number">1</span>, <span class="number">1</span>) : <span class="keyword">new</span> Vector3(<span class="number">1</span>, -(normal.x + normal.z) / normal.y, <span class="number">1</span>)) : <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">1</span>, -(normal.x + normal.y) / normal.z);</span><br><span class="line">Instantiate(gameObject, pos, Quaternion.LookRotation(normal_per));</span><br></pre></td></tr></table></figure><hr><ul><li>TreeInstances<br>先是建了一些树，一开始还煞费苦心想得到世界坐标系中完美的地形上的种树点，最后发现<code>y</code>值根本不重要。随机出<code>0~1f</code>范围内的<code>x</code>和<code>z</code>就可以直接建树了。<br>想在退出时删掉所有树。<code>treeInstances</code>是内建数组，不能直接修改，需要新建数组读出，修改，再写入。</li></ul><p><strong>参考:</strong><a href="https://blog.csdn.net/smilingeyes/article/details/41848001" target="_blank" rel="noopener">U3D运行时修改地型中的树木</a><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddTree</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TreeInstance tempInstance = <span class="keyword">new</span> TreeInstance();</span><br><span class="line">    tempInstance.prototypeIndex = <span class="number">0</span>;</span><br><span class="line">    tempInstance.color = Color.white;</span><br><span class="line">    tempInstance.heightScale = <span class="number">1</span>;</span><br><span class="line">    tempInstance.widthScale = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">float</span> x = UnityEngine.Random.Range(<span class="number">0f</span>, <span class="number">1f</span>);</span><br><span class="line">    <span class="keyword">float</span> y = UnityEngine.Random.Range(<span class="number">0f</span>, <span class="number">1f</span>);</span><br><span class="line">    tempInstance.position = <span class="keyword">new</span> Vector3(x, <span class="number">0</span>, y);</span><br><span class="line">    Debug.Log(tempInstance.position);</span><br><span class="line">    terrain.AddTreeInstance(tempInstance);</span><br><span class="line">    terrain.Flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnApplicationQuit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;TreeInstance&gt; treeInstances = <span class="keyword">new</span> List&lt;TreeInstance&gt;(terrain.terrainData.treeInstances);</span><br><span class="line">    treeInstances.Clear();</span><br><span class="line">    terrain.terrainData.treeInstances = treeInstances.ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改变所有树的状态，也同样需要借助数组。一开始想着遍历，按索引一个一个更改后分别增删。试了一番才明白每次都在第一个上面操作，然后删掉第一个才对。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SwitchAllTreeStatus</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;TreeInstance&gt; treeInstances = <span class="keyword">new</span> List&lt;TreeInstance&gt;(terrain.terrainData.treeInstances);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; terrain.terrainData.treeInstances.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        TreeInstance tempInstance = <span class="keyword">new</span> TreeInstance();</span><br><span class="line">        tempInstance.prototypeIndex = season == <span class="number">0</span> ? <span class="number">0</span> : (season == <span class="number">1</span> ? <span class="number">0</span> : (season == <span class="number">2</span> ? <span class="number">0</span> : (season == <span class="number">3</span> ? <span class="number">1</span> : <span class="number">2</span>)));</span><br><span class="line">        tempInstance.color = treeInstances[<span class="number">0</span>].color;</span><br><span class="line">        tempInstance.lightmapColor = treeInstances[<span class="number">0</span>].lightmapColor;</span><br><span class="line">        tempInstance.heightScale = treeInstances[<span class="number">0</span>].heightScale;</span><br><span class="line">        tempInstance.widthScale = treeInstances[<span class="number">0</span>].widthScale;</span><br><span class="line">        tempInstance.position = treeInstances[<span class="number">0</span>].position;</span><br><span class="line">        treeInstances.RemoveAt(<span class="number">0</span>);</span><br><span class="line">        treeInstances.Add(tempInstance);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    terrain.terrainData.treeInstances = treeInstances.ToArray();</span><br><span class="line">    <span class="comment">// Debug.Log(terrain.terrainData.treeInstances.Length);</span></span><br><span class="line">    terrain.Flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Terrain"><a href="#Terrain" class="headerlink" title="Terrain"></a>Terrain</h3><ul><li>Paint Texture - Textures 用代码切换<br>默认使用原型列表中的第一个texture，所以改一下原型列表的次序。<br><strong>参考:</strong><a href="https://blog.csdn.net/lei_7103/article/details/75389215" target="_blank" rel="noopener">动态更换地形纹理图</a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SplatPrototype[] oriSplatPrototypes = <span class="keyword">new</span> SplatPrototype[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    oriSplatPrototypes = terrain.terrainData.splatPrototypes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SwitchSplat</span>(<span class="params"><span class="keyword">int</span> splat</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SplatPrototype[] newSplatPrototypes = <span class="keyword">new</span> SplatPrototype[<span class="number">1</span>];</span><br><span class="line">    newSplatPrototypes[<span class="number">0</span>] = oriSplatPrototypes[splat];</span><br><span class="line">    terrain.terrainData.splatPrototypes = newSplatPrototypes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnApplicationQuit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    terrain.terrainData.splatPrototypes = oriSplatPrototypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>Terrian Settings - Base Terrain - Material:Custom - shader 用代码切换<br>Material不变，转而切换该材料所用的shader。<br><strong>参考:</strong><a href="https://blog.csdn.net/thebluewing/article/details/72820162" target="_blank" rel="noopener">unity修改材质属性和更换shader</a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terrain.materialTemplate.shader = Shader.Find(<span class="string">"Custom/myShader"</span>);</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h3><ul><li>Compute Shader<br><strong>参考:</strong><a href="https://zhuanlan.zhihu.com/p/33675797" target="_blank" rel="noopener">Unity Compute Shader 硬件粒子效果</a><br><a href="https://github.com/krylov-na/Compute-shader-particles" target="_blank" rel="noopener">Compute-shader-particles</a>这个项目里面同时渲染了100w左右的粒子，60帧满帧+97%的cpu剩余空闲。</li></ul><blockquote><p>c# 脚本 负责整体控制<br>compute shader 负责GPU计算<br>shader 负责渲染<br><code>ComputeBuffer</code>类，用于传递自定义数据。每组自定义结构需要一个<code>ComputeBuffer</code><br><code>Graphics.DrawProcedural</code>函数,用于渲染粒子</p></blockquote><blockquote><p>自定义结构用于基础数据在cpu和gpu运算间传递<br><code>ComputeBuffer</code>用于向<code>Compute Shader</code>传递自定义结构，之后会用于在<code>cpu</code>到<code>compute shader</code>到<code>shader</code>直接传递参数<br><code>kernelIndex</code> Compute Shader里可执行函数的id,后面update里调用</p></blockquote><blockquote><p><code>computeShader.SetBuffer(kernelIndex, &quot;Particles&quot;, particles);</code>//为compute shader的函数写入数据buffer (id, compute, ComputeBuffer)<br><code>material.SetBuffer(&quot;Particles&quot;, particles);</code>//为shader 写入数据buffer (shader, ComputeBuffer)</p></blockquote><blockquote><p>传递<code>Vector2</code>和<code>Vector3</code>要转换成<code>float[2]</code>, <code>float[3]</code></p></blockquote><p><code>normalize(v)</code>等同于<code>v/length(v)</code>等同于<code>v/sqrt(d2)</code>，其中<code>d2 = v.x * v.x + v.y * v.y+ v.z * v.z;</code></p><hr><ul><li>Vertex/Fragment Shader<br><strong>参考:</strong><a href="https://github.com/candycat1992/Unity_Shaders_Book" target="_blank" rel="noopener">《Unity Shader入门精要》</a></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">float4 <span class="title">vert</span>(<span class="params">float4 v : POSITION</span>) : SV_POSITION</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mul(UNIT_MATRIX_MVP, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">fixed4 <span class="title">frag</span>(<span class="params"></span>) : SV_Target</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fixed4(<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>POSITION</code>:把模型的顶点坐标填充到输入参数v中<br><code>SV_POSITION</code>:顶点着色器的输出是裁剪空间中的顶点坐标<br><code>SV_Target</code>:把用户的输出颜色存储到一个渲染目标（默认帧缓存）中</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> StructName&#123;</span><br><span class="line">    Type Name : Semantic;</span><br><span class="line">    Type Name : Semantic;</span><br><span class="line">    ……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>page 110  </p></blockquote><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">描述</th><th style="text-align:center">通常类型</th></tr></thead><tbody><tr><td style="text-align:center">POSITION</td><td style="text-align:center">模型空间中的顶点位置</td><td style="text-align:center">float4</td></tr><tr><td style="text-align:center">NORMAL</td><td style="text-align:center">顶点法线</td><td style="text-align:center">float3</td></tr><tr><td style="text-align:center">TANGENT</td><td style="text-align:center">顶点切线</td><td style="text-align:center">float4</td></tr><tr><td style="text-align:center">TEXCOORDn</td><td style="text-align:center">第n+1组顶点纹理坐标</td><td style="text-align:center">float2/float4</td></tr><tr><td style="text-align:center">COLOR</td><td style="text-align:center">顶点颜色</td><td style="text-align:center">fixed4/float4</td></tr></tbody></table><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">SV_POSITION</td><td style="text-align:center">裁剪空间中的顶点坐标，必需</td></tr><tr><td style="text-align:center">COLOR0/COLOR1</td><td style="text-align:center">输出第一/二组顶点颜色</td></tr><tr><td style="text-align:center">TEXCOORD0~TEXCOORD7</td><td style="text-align:center">输出纹理坐标</td></tr></tbody></table><blockquote><p>需要把一些自定义的数据从顶点着色器传递给片元着色器时，用<code>TEXCOORD0</code>  </p></blockquote><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">描述</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">SV_Target</td><td style="text-align:center">输出值存储到渲染目标中</td><td style="text-align:center">等同于COLOR(DirectX 9)</td></tr></tbody></table><p><strong>参考:</strong><a href="https://docs.unity3d.com/Manual/SL-ShaderSemantics.html" target="_blank" rel="noopener">Unity - Manual: Shader semantics</a>  <a href="https://docs.microsoft.com/zh-cn/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics" target="_blank" rel="noopener">Semantics | Microsoft Docs</a></p><blockquote><p>顶点ID：SV_VertexID #pragma target 3.5</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TerrainData&quot;&gt;&lt;a href=&quot;#TerrainData&quot; class=&quot;headerlink&quot; title=&quot;TerrainData&quot;&gt;&lt;/a&gt;TerrainData&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;四个方法&lt;br&gt;&lt;code&gt;Vector3
      
    
    </summary>
    
    
      <category term="Unity3D" scheme="http://liaaaaa.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://liaaaaa.github.io/2018/12/hello-world/"/>
    <id>http://liaaaaa.github.io/2018/12/hello-world/</id>
    <published>2018-12-17T13:10:26.303Z</published>
    <updated>2018-12-17T13:10:26.303Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
